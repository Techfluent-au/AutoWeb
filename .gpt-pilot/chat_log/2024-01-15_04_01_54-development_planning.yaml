endpoint: OPENAI
model: gpt-4-1106-preview
messages:
- role: system
  content: You are an experienced tech lead in a software development agency and your main task is to break down the project
    into smaller tasks that developers will do. You must specify each task as clear as possible. Each task must have a description
    of what needs to be implemented, a programmatic goal that will determine if a task can be marked as done from a programmatic
    perspective and user-review goal that will determine if a task is done or not but from a user perspective since it will
    be reviewed by a human.
- role: user
  content: 'You are working in a software development agency and a project manager and software architect approach you telling
    you that you''re assigned to work on a new project. You are working on a App called "AutoWeb" and you need to create a
    detailed development plan so that developers can start developing the app.


    Here is a high level description of "AutoWeb":

    ```

    The software application "AutoWeb" will be built with the following features:


    - Advanced Targeting Algorithms to enhance data identification and scraping activities based on keywords or URLs.

    - Machine Learning Integration for process optimization over time.

    - Customizable Data Processing to allow users to format, tag, categorize, and integrate data with their systems.

    - An intuitive User Interface and Experience with real-time crawling and scraping activity monitoring through dashboards.

    - Compliance and Security Features for adherence to web scraping laws and data protection.

    - Collaboration Tools for project co-management and communication.

    - Scalability and Performance Optimization capable of large-scale operations.

    - Analytics and Reporting Capabilities for data insights and decision-making processes.

    - Integration with GPT and Other AI Technologies for data analysis and summarization.

    - Continuous Updates and Support adjusted to the latest web technologies and customer needs.


    AutoWeb will specifically target the following data types for scraping:


    - Textual Content such as webpage articles, blogs, research papers, reports, and forum posts.

    - Structured Data including tables, lists, and data in HTML/XML/JSON.

    - Images, their associated metadata, photographs, and graphics.

    - Videos along with their thumbnails, previews, and metadata.

    - Audio Files and accompanied transcripts if available.

    - Social Media Content including posts, user profile information, and social graphs.

    - E-commerce Data like product information, pricing, reviews, ratings, and availability.

    - Geospatial Data encompassing maps, locations, and geotagged content.

    - Scientific and Statistical Data including datasets, charts, and graphs.

    - PDFs and Documents.

    - Event and Schedule Information.


    Multilingual support features will include:


    - Multilingual Content Scraping with automatic language detection.

    - Language-Specific Crawling Parameters.

    - Translation and Localization Tools.

    - Multilingual Data Processing and Analysis.

    - A User Interface in multiple languages.

    - Support for Non-Latin Scripts.

    - Cultural and Contextual Considerations with collaboration from language experts.

    - Customizable Language Settings for Users.


    Storage solutions for AutoWeb will entail:


    - An internal scalable database system for storing and managing diverse data types.

    - User-friendly data management tools for stored data navigation, editing, organization, and tagging.

    - Automated Backup and Recovery systems for data integrity.

    - Compatibility with various external database formats and systems, with seamless data exportability.

    - Customizable Export Options for data formatting.

    - API Integration for easy connection with external databases and systems.

    - Real-Time Sync Capability to keep external databases current with new data.


    AutoWeb will offer both internal and external data storage options providing flexibility, scalability, convenience, and
    compliance with diverse security requirements.

    ```



    Here are the technologies that you need to use for this project:

    ```


    - Node.js


    - Express


    - MongoDB


    - Mongoose


    - Puppeteer


    - Cheerio


    - TensorFlow.js


    - React


    - Redux


    - Socket.io


    - Bootstrap


    - HTML


    - CSS3


    - axios


    - JSON


    - jsonwebtoken


    - bcryptjs


    - cors


    - helmet


    - compression


    - i18next


    - react-i18next


    - moment


    - cron


    - echarts


    - papaparse


    - multer


    - sharp


    - node-cron


    - nodemailer


    - winston


    - morgan


    - lodash


    - dotenv


    - passport


    - passport-local


    - express-session


    - connect-mongo


    - body-parser


    - serve-static


    - pdf-parse


    - xml2js


    - node-geocoder


    - googleapis


    ```




    Before we go into the coding part, I want you to split the development process of creating this app into smaller tasks
    so that it is easier to develop, debug and make the app work. Each smaller task of this app has to be a whole that can
    be reviewed by a developer to make sure we''re on a right track to create this app completely.


    Each task needs to be related only to the development of this app and nothing else - once the app is fully working, that
    is it. There shouldn''t be a task for researching, deployment, writing documentation, or anything that is not writing
    the actual code.


    Now, based on the project details provided, think task by task and create the entire development plan. Start from the
    project setup and specify each task until the moment when the entire app should be fully working.


    **IMPORTANT**

    Dividing project into tasks is extremely important job and has to be done carefully while always strictly following all
    rules listed bellow.


    Rule #1

    There should never be a task that is only testing or ensuring something works, every task must have coding involved. Have
    this in mind for every task, but it is extremely important for last task of project. Testing if app works will be done
    as part of each task.


    Rule #2

    You have to make sure the project is not split into tasks that are too small or simple for no reason but also not too
    big or complex so that they are hard to develop, debug and review. Here are examples of poorly created tasks:


    **too simple tasks**

    - Set up a Node.js project and install all necessary dependencies.

    - Establish a MongoDB database connection using Mongoose with the IP ''127.0.0.1''.


    **too complex tasks**

    - Set up Node.js project with /home, /profile, /register and /login routes that will have user authentication, connection
    to MongoDB with user schemas, mailing of new users and frontend with nice design.


    You must to avoid creating tasks that are too simple or too complex. You have to aim to create tasks that are medium complexity.
    Here are examples of tasks that are good:


    **good tasks**

    - Set up a Node.js project, install all necessary dependencies and set up an express server with a simple route to `/ping`
    that returns the status 200.

    - Establish a MongoDB database connection and implement the message schema using Mongoose for persistent storage of messages.


    Rule #3

    Every app should have different number of tasks depending on complexity. Think task by task and create the minimum number
    of tasks that are relevant for this specific app. Here are some examples of apps with different complexity that can give
    you guidance on how many tasks you should create:


    Example #1:

    app description: "I want to create an app that will just say ''Hello World'' when I open it on my localhost:3000."

    number of tasks: 1-3


    Example #2:

    app description: "Create a node.js app that enables users to register and log into the app. On frontend it should have
    /home (shows user data), /register and /login. It should use sessions to keep user logged in."

    number of tasks: 2-6


    Example #3:

    app description: "A cool online shoe store, with a sleek look. In terms of data models, there are shoes, categories and
    user profiles. For web pages: product listing, details, shopping cart. It must look cool and jazzy."

    number of tasks: 5-15'
- role: user
  content: "**IMPORTANT**\nYou must respond with ONLY the JSON object, with NO additional text or explanation.\n\nHere is\
    \ the schema for the expected JSON object:\n```json\n{\n    \"plan\": {\n        \"type\": \"array\",\n        \"description\"\
    : \"List of development tasks that need to be done to implement the entire plan.\",\n        \"items\": {\n          \
    \  \"type\": \"object\",\n            \"description\": \"Development task that needs to be done to implement the entire\
    \ plan.\",\n            \"properties\": {\n                \"description\": {\n                    \"type\": \"string\"\
    ,\n                    \"description\": \"Description of the development task that needs to be done to implement the entire\
    \ plan.\"\n                },\n                \"programmatic_goal\": {\n                    \"type\": \"string\",\n \
    \                   \"description\": \"Detailed description of programmatic goal. Programmatic goal that will determine\
    \ if a task can be marked as done from a programmatic perspective (this will result in an automated test that is run before\
    \ the task is sent to you for a review). All details previously specified by user that are important for this task must\
    \ be included in this programmatic goal.\"\n                },\n                \"user_review_goal\": {\n            \
    \        \"type\": \"string\",\n                    \"description\": \"User review goal that will determine if a task\
    \ is done or not, but from a user perspective since it will be reviewed by a human.\"\n                }\n           \
    \ },\n            \"required\": [\n                \"description\",\n                \"programmatic_goal\",\n        \
    \        \"user_review_goal\"\n            ]\n        }\n    }\n}\n```\n\n"
response: "```json\n{\n    \"plan\": [\n        {\n            \"description\": \"Set up the project structure, create a Node.js\
  \ application with Express and initialize a Git repository. Also, establish linting and formatting standards using ESLint\
  \ and Prettier.\",\n            \"programmatic_goal\": \"Run a Node.js application with Express that serves a `GET /ping`\
  \ endpoint returning HTTP 200 and a 'pong' message. ESLint and Prettier must be configured with the standard style and no\
  \ lint errors should be present in the initial commit.\",\n            \"user_review_goal\": \"When visiting `/ping`, the\
  \ server responds with 'pong' and the initial commit code should adhere to the standard code style.\"\n        },\n    \
  \    {\n            \"description\": \"Create and configure a MongoDB database with Mongoose, and set up a user authentication\
  \ system using Passport.js with a simple User schema.\",\n            \"programmatic_goal\": \"Successfully connect to a\
  \ MongoDB instance and authenticate a user using Passport.js with local strategy. Test endpoints /register and /login should\
  \ be working with the ability to register a new user and login with its credentials.\",\n            \"user_review_goal\"\
  : \"Register a new user on `/register` and then log in with the same credentials on `/login`, ensuring user data is persisted\
  \ correctly.\"\n        },\n        {\n            \"description\": \"Develop the data scraping module using Puppeteer and\
  \ Cheerio for dynamic and static content respectively, including basic target URLs management.\",\n            \"programmatic_goal\"\
  : \"Write a module capable of scraping static content from a given URL using Cheerio and dynamic content using Puppeteer.\
  \ Ensure scrapers handle a list of target URLs stored in the database and return scraped content.\",\n            \"user_review_goal\"\
  : \"Verify that the scraper can collect data from multiple static and dynamic target URLs and store them into the database.\"\
  \n        },\n        {\n            \"description\": \"Implement the advanced targeting algorithm module that can select\
  \ URLs based on provided keywords.\",\n            \"programmatic_goal\": \"Create an algorithm that takes keywords and\
  \ identifies relevant URLs for scraping. The algorithm should be able to update the database with new targeted URLs based\
  \ on keyword matches.\",\n            \"user_review_goal\": \"Ensure that the targeting algorithm recommends accurate URLs\
  \ for a given set of keywords after a manual review.\"\n        },\n        {\n            \"description\": \"Design and\
  \ implement a multilingual content scraping system that includes automatic language detection and language-specific crawling\
  \ parameters.\",\n            \"programmatic_goal\": \"Implement functionality to detect the language of scraped content\
  \ automatically and to apply different crawling parameters based on the detected language.\",\n            \"user_review_goal\"\
  : \"Confirm that the scraper successfully identifies the language of content and applies the correct crawling parameters\
  \ for at least two different languages.\"\n        },\n        {\n            \"description\": \"Integrate TensorFlow.js\
  \ for machine learning process optimization, such as refining scraping strategies and performance improvements.\",\n   \
  \         \"programmatic_goal\": \"Use TensorFlow.js to create and train a simple model based on scraping results. The model\
  \ should optimize the decision process of whether to continue scraping similar content.\",\n            \"user_review_goal\"\
  : \"Validate that the system uses machine learning feedback to adjust its scraping strategy, resulting in improved efficiency\
  \ observable in performance metrics.\"\n        },\n        {\n            \"description\": \"Develop the customizable data\
  \ processing and storage system to manage various data types with a scalable internal database, and external export features.\"\
  ,\n            \"programmatic_goal\": \"Code a data processing system that formats, tags, and categorizes scraped content.\
  \ Implement the database schemas using Mongoose for the various data types and establish export functionalities.\",\n  \
  \          \"user_review_goal\": \"Ensure that the system can display formatted data, apply tags and categorization, and\
  \ successfully export data to a specified external format.\"\n        },\n        {\n            \"description\": \"Create\
  \ React frontend applications with React-Redux for state management and an intuitive, multilingual user interface using\
  \ i18next.\",\n            \"programmatic_goal\": \"Develop a React application with Redux for state management, incorporate\
  \ the i18next library for internationalization and ensure that the user interface is intuitive and capable of real-time\
  \ updates.\",\n            \"user_review_goal\": \"Verify that the web application is user-friendly, supports multiple languages,\
  \ and reflects real-time data changes.\"\n        },\n        {\n            \"description\": \"Implement the real-time\
  \ dashboard with data analytics and reporting capabilities using Socket.io, Moment, Cron, and ECharts.\",\n            \"\
  programmatic_goal\": \"Build a real-time dashboard that displays analytics and reports using live data. The dashboard should\
  \ update using Socket.io, format times with Moment, handle scheduled operations with Cron, and represent data visually with\
  \ ECharts.\",\n            \"user_review_goal\": \"Check that the dashboard functions in real-time, with scheduled data\
  \ updates, proper time formatting, and data visualization that makes sense for the scraped data.\"\n        },\n       \
  \ {\n            \"description\": \"Add the security, compliance, and data protection features using Helmet, jwt, bcrypt\
  \ and ensure regular updates through Node-Cron.\",\n            \"programmatic_goal\": \"Integrate Helmet for basic security\
  \ protections, implement JWT and bcrypt for secure authentication, and set up Node-Cron tasks for regular updates of the\
  \ system.\",\n            \"user_review_goal\": \"Ascertain that the system is secure against common vulnerabilities, authentication\
  \ is robust, and scheduled updates occur without issues.\"\n        },\n        {\n            \"description\": \"Develop\
  \ integration features with GPT and other AI technologies for data analysis and summarization using Googleapis and custom\
  \ AI modules.\",\n            \"programmatic_goal\": \"Code modules that leverage GPT and other AI tools through Googleapis\
  \ or similar libraries to analyze and summarize the data, with an interface for users to interact with this functionality.\"\
  ,\n            \"user_review_goal\": \"Confirm the application can analyze and create summaries of scraped data using AI\
  \ technologies and provide understandable insights to the user.\"\n        },\n        {\n            \"description\": \"\
  Set up collaboration tools within the app for project co-management and communication using Socket.io for real-time interaction.\"\
  ,\n            \"programmatic_goal\": \"Build in-app collaboration tools that include project management features and real-time\
  \ communication capabilities using Socket.io to facilitate synchronous cooperation between users.\",\n            \"user_review_goal\"\
  : \"Verify that users can co-manage projects and communicate in real-time within the app effectively.\"\n        },\n  \
  \      {\n            \"description\": \"Implement comprehensive logging and error handling using Winston, Morgan, and custom\
  \ middleware to provide a robust monitoring system.\",\n            \"programmatic_goal\": \"Integrate Winston for logging,\
  \ Morgan for HTTP request logging, and write middleware to handle errors gracefully. There should be clear logs for both\
  \ regular operations and errors.\",\n            \"user_review_goal\": \"Monitor app activities and errors to ensure that\
  \ the logging is comprehensible and that the system responds gracefully to issues.\"\n        },\n        {\n          \
  \  \"description\": \"Conduct final integration and compatibility checks, confirming everything works harmoniously, including\
  \ API connections, data sync, and user functionality.\",\n            \"programmatic_goal\": \"Execute a thorough integration\
  \ test to ensure all components of the application work together without conflicts, APIs are properly connected, the data\
  \ is syncing in real-time, and all user-facing features are operational.\",\n            \"user_review_goal\": \"Perform\
  \ a final review of the app's complete functionality, making sure the user experience is seamless, and all components are\
  \ interacting without errors.\"\n        }\n    ]\n}\n```"
